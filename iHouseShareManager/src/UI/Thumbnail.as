package UI{			import flash.display.Bitmap;	import flash.display.GradientType;	import flash.display.GraphicsPathWinding;	import flash.display.Loader;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.filters.DropShadowFilter;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;		import mx.controls.Alert;	import mx.controls.Image;	import mx.controls.Label;		import utils.TweenLite;
		public class Thumbnail extends Sprite	{				public  var _ref	:Number;		public  var _source:String;		public  var _width:Number;		public  var _height:Number;		public  var m_widthImage:int;		public  var m_heightImage:int;		private var loader	:Loader;		private var m_Parent:Navigator;		private var m_del:Sprite;		private var m_cProgress:TextField; 		public var m_cCheck:MyCheckBox;		private var m_bitmap:Sprite;/*		private var logo:GIFPlayer = new GIFPlayer();*/		public static const EVENT_CLICKED	:String		= "NavItem_Event_Clicked";		public static const EVENT_SELECTED:String	    = "NavItem_Event_Selected";		public function Thumbnail(ref:Number, source:String, width:Number, height:Number, parent:Navigator)		{			super();			_ref 	 = ref;			_source  = source;			_width   = width;			_height  = height;			m_Parent = parent;			init();		}				/**		 * Initialize the NavItem		 * @private		 */				private function init( ):void		{		    addChild( background );			OnImage();						var delBitmap:Bitmap = new m_Parent.delTex();			delBitmap.x = 205;			delBitmap.y = 185;			m_del = new Sprite;/*			m_del.addChild(delBitmap);						this.addChild(m_del);	*/					/*			var request:URLRequest = new URLRequest("353.gif"); //84.gif			logo.load(request);                          			addChild(logo);*/			var format1:TextFormat =new TextFormat(); 			//	format1.bold = true;			format1.size 		 = 12; 			format1.color		 = 0x222222;						m_cProgress  		 = new TextField();			m_cProgress.text	 = "";			m_cProgress.autoSize = "left";			m_cProgress.setTextFormat(format1);			m_cProgress.x 		 = 80;			m_cProgress.y 		 = 80;			addChild( m_cProgress );						}				private function  OnImage():void		{		    loader = new Loader();		    var request:URLRequest = new URLRequest(_source);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);		    loader.load(request);		    loader.alpha = 1;		}				private function errorHandler(e:IOErrorEvent):void		{			loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,errorHandler);			loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, completeHandler);						m_cProgress.text="未下载成功";						m_bitmap = new Sprite;					//	m_bitmap.addChild(bitmap);			this.addChild(m_bitmap); 			m_bitmap.visible = false;						enable();		}				private function progressHandler(e:ProgressEvent):void {			var num:uint = (e.bytesLoaded / e.bytesTotal) * 100;			m_cProgress.text="已加载" + num + "%";		}				private function completeHandler(e:Event):void {						loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,errorHandler);			loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, completeHandler);							var background:Shape = new Shape();			background.graphics.beginFill( 0x000000);			background.graphics.drawRect(10, 10, 210, 160);			background.graphics.endFill();			addChild( background );						var loader1:Loader = Loader(e.target.loader);						var bitmap:Bitmap  = Bitmap(loader1.content);			bitmap.scaleX = 210/loader1.contentLoaderInfo.width;			bitmap.scaleY = 160/loader1.contentLoaderInfo.height;			bitmap.x 	  = 10;   			bitmap.y 	  = 10;			bitmap.smoothing = true;						m_bitmap = new Sprite;			m_bitmap.doubleClickEnabled = true;			m_bitmap.addChild(bitmap);			this.addChild(m_bitmap); 			m_widthImage  = loader1.contentLoaderInfo.width;			m_heightImage = loader1.contentLoaderInfo.height;						var format1:TextFormat =new TextFormat(); 			//format1.bold = true;			format1.size = 12; 			format1.color= 0x222222;									var str:String ="图片尺寸: ";			str+=loader1.contentLoaderInfo.width.toString();			str+="x";			str+=loader1.contentLoaderInfo.height.toString();						var cHelp:TextField  = new TextField();			cHelp.text=str;			cHelp.autoSize = "left";			cHelp.setTextFormat(format1);			cHelp.x = 10;			cHelp.y = 181;			addChild( cHelp );						m_cCheck = new MyCheckBox();			m_cCheck.text = "选择区";			m_cCheck.x = 179;			m_cCheck.y = 129;			m_cCheck.height =40;			addChild(m_cCheck);								m_cProgress.visible = false;						enable();		}						private function get background( ):Shape		{			var background:Shape = new Shape();			background.graphics.beginFill( 0xffffff);			background.graphics.drawRect(0, 0, _width, _height);			background.graphics.endFill();						background.graphics.lineStyle( 1,0xdddddd);			background.graphics.drawRect(0, 0, _width, _height);						var shadow:DropShadowFilter = new DropShadowFilter();			//shadow.distance = 5;			shadow.angle 	= 45;			shadow.quality	= 1;			shadow.strength = 1;			shadow.color	= 0xdddddd;			background.filters = [shadow];				return background;   		}						public function disable():void {			tweenAlpha( 0.6, 1 )			deactivateMouse()		}				public function enable():void {			tweenAlpha( 0.6, 1 )			activateMouse( )		}		private function out(e:Event = null):void {			tweenAlpha( 0.2, 1 )			buttonMode	= false;		}				private function over(e:Event = null):void {			tweenAlpha( 0.2, 0.3 )			buttonMode	= true;		}						private function tweenAlpha( duration:Number, alpha:Number ):void		{			TweenLite.to(this.m_bitmap, duration, {alpha:alpha});		}					private function activateMouse( ):void		{				this.m_bitmap.addEventListener(MouseEvent.DOUBLE_CLICK, doubleclicked);			this.m_bitmap.addEventListener(MouseEvent.CLICK,		clicked);			this.m_bitmap.addEventListener(MouseEvent.MOUSE_OVER, over   	);			this.m_bitmap.addEventListener(MouseEvent.MOUSE_OUT,  out 	);							this.m_cCheck.addEventListener(MouseEvent.CLICK,		checked);			this.m_cCheck.addEventListener(MouseEvent.MOUSE_OVER, 	checkover   );			this.m_cCheck.addEventListener(MouseEvent.MOUSE_OUT,  	checkout    );/*			this.m_del.addEventListener(MouseEvent.CLICK,		delClicked);			this.m_del.addEventListener(MouseEvent.MOUSE_OVER,	delOver   );			this.m_del.addEventListener(MouseEvent.MOUSE_OUT, 	delOut    );*/						}				private function deactivateMouse( ):void		{			buttonMode	= false;						this.m_bitmap.removeEventListener(MouseEvent.DOUBLE_CLICK, doubleclicked);			this.m_bitmap.removeEventListener(MouseEvent.CLICK,		    clicked);			this.m_bitmap.removeEventListener(MouseEvent.MOUSE_OVER, over	);			this.m_bitmap.removeEventListener(MouseEvent.MOUSE_OUT,  out 	);						this.m_cCheck.removeEventListener(MouseEvent.CLICK,			checked		);			this.m_cCheck.removeEventListener(MouseEvent.MOUSE_OVER, 	checkover   );			this.m_cCheck.removeEventListener(MouseEvent.MOUSE_OUT,  	checkout    );						/*			this.m_del.removeEventListener(MouseEvent.CLICK, 	  delClicked);			this.m_del.removeEventListener(MouseEvent.MOUSE_OVER, delOver	);			this.m_del.removeEventListener(MouseEvent.MOUSE_OUT,  delOut 	);	*/				}				private function checked(e:Event = null):void {			dispatchEvent(new Event(EVENT_SELECTED));		}				private function checkover(e:Event = null):void {			buttonMode	= true;						m_cCheck.onMouseOverHandler(null);		//	TweenLite.to(this.m_del, 0.1, {alpha:0.3});					}					private function checkout(e:Event = null):void {						buttonMode	= false;			m_cCheck.onMouseOutHandler(null);		//	TweenLite.to(this.m_del, 0.1, {alpha:1});		}				private function clicked(e:Event = null):void {		//	m_Parent.gMain.mHelp.visible = false;		}				/**		 * Dispatch an event when the NavItem is clicked		 * @param e		 * @private		 */							private function doubleclicked(e:Event = null):void {		//	m_Parent.gMain.mHelp.visible = false;			dispatchEvent(new Event(EVENT_CLICKED));		}				private function delClicked(e:Event = null):void {					//	m_Parent.gMain.mSceneImageListDialog.DeleteImage(_ref);		}				private function delOver(e:Event = null):void {			buttonMode	= true;			TweenLite.to(this.m_del, 0.1, {alpha:0.3});					}					private function delOut(e:Event = null):void {			buttonMode	= false;			TweenLite.to(this.m_del, 0.1, {alpha:1});		}								public function get referenceNumber():Number { return _ref; }		}}