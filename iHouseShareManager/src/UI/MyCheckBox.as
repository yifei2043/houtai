package UI {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.text.TextField;	import flash.text.TextFormat;		import mx.controls.Label;

	/**	 * ...自定义单选按钮样式	 * ...至于什么样式你想怎么搞就怎么搞	 * @author lzl	 */	public class MyCheckBox extends Sprite	{		private var _label:TextField;  		private var _tick:Shape;  		private var _checked:Boolean=false;  		private var _isDowned:Boolean=false;  		private var _outlineGlowFilter:GlowFilter;  		private var _innerlineGlowFilter:GlowFilter;  				public function get text():String  		{  			return _label.text;  		}  				public function set text(value:String):void  		{  			if(_label.text!=value)  			{  				_label.text=value;  				_label.y=15;  			}  		}  				public function get checked():Boolean  		{  			return _checked;  		}  				public function set checked(value:Boolean):void  		{  			if(_checked!=value)  			{  				_checked=value;  				refreshBackground();  			//	dispatchEvent(new MyCheckBoxEvent(MyCheckBoxEvent.CHANE_SELECT));  			}  		}  				public function MyCheckBox():void  		{  			super(); 			initialize();				}  				protected function initialize():void  		{  			this.mouseChildren=false;  						_outlineGlowFilter=new GlowFilter(0x222222,1,1,1,1);  			_innerlineGlowFilter=new GlowFilter(0x222222,1,1,1,1,1,true);  			 						_tick=new Shape();			//_tick.height=40;			addChild(_tick);  			_label=new TextField();			_label.height=34;			_label.x=-80; 			var format1:TextFormat =new TextFormat(); 			format1.size = 18; 			format1.color= 0xffffff;						_label.setTextFormat(format1);						addChild(_label);						if(stage)  			{  				onAddedToStageHandler();  			}  			else 			{  				addEventListener(Event.ADDED_TO_STAGE,onAddedToStageHandler);  			}  						refreshBackground();  						_tick.filters=[_outlineGlowFilter];  		}  				private function onAddedToStageHandler(e:Event=null):void  		{  			removeEventListener(Event.ADDED_TO_STAGE,onAddedToStageHandler);  						addEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStageHandler);  						addEventListener(MouseEvent.MOUSE_OVER,onMouseOverHandler);  			addEventListener(MouseEvent.MOUSE_OUT,onMouseOutHandler);  			addEventListener(MouseEvent.MOUSE_DOWN,onMouseDownHandler);  			addEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);  			addEventListener(MouseEvent.CLICK,onClickHandler);  		}  				private function onClickHandler(e:MouseEvent):void  		{  			if( checked == true && e.localX>-15 )			{				checked=!checked;  			}			else if( checked == false )					checked=!checked;		}  				private function onMouseUpHandler(e:MouseEvent=null):void  		{  			if(_isDowned)  			{  				_isDowned=false;  				_label.x-=1;  				_label.y-=1;  			}  		}  				private function onMouseDownHandler(e:MouseEvent):void  		{  			if(!_isDowned)  			{  				_isDowned=true;  				_label.x+=1;  				_label.y+=1;  			}  		}  				public function onMouseOutHandler(e:MouseEvent):void  		{  			removeEventListener(MouseEvent.MOUSE_OUT,onMouseOutHandler);  			addEventListener(MouseEvent.MOUSE_OVER,onMouseOverHandler);  						onMouseUpHandler();  					//	_tick.filters=[_outlineGlowFilter];  						refreshBackground();		}  				public function onMouseOverHandler(e:MouseEvent):void  		{  			removeEventListener(MouseEvent.MOUSE_OVER,onMouseOverHandler);  			addEventListener(MouseEvent.MOUSE_OUT,onMouseOutHandler);  			 						if(_checked == false )  			{ 				_tick.graphics.beginFill(0xff8000,0.6);				_tick.graphics.lineStyle(1,0xff0000,0.0);				_tick.graphics.moveTo(-169,10);  				_tick.graphics.lineTo(41,10);  				_tick.graphics.lineTo(41,41);  				_tick.graphics.lineTo(-169,41);  				_tick.graphics.lineTo(-169,10);				_label.alpha = 1;				_label.textColor=0xffffff;								_label.visible = true;							}		}  				private function onRemovedFromStageHandler(e:Event):void  		{  			removeEventListener(Event.REMOVED_FROM_STAGE,onRemovedFromStageHandler);  			removeEventListener(MouseEvent.MOUSE_OVER,onMouseOverHandler);  			removeEventListener(MouseEvent.MOUSE_OUT,onMouseOutHandler);  			removeEventListener(MouseEvent.MOUSE_DOWN,onMouseDownHandler);  			removeEventListener(MouseEvent.MOUSE_UP,onMouseUpHandler);  			removeEventListener(MouseEvent.CLICK,onClickHandler);  		}  				protected function refreshBackground():void  		{  			_tick.graphics.clear();  			 			if(_checked)  			{  				_tick.graphics.beginFill(0x00ff00,0.01);  				_tick.graphics.drawRect(0,10,40,30);  				_tick.graphics.endFill();  			}			else			{								_tick.graphics.beginFill(0x00ff00,0.01);  				_tick.graphics.drawRect(-169,10,210,31);  				_tick.graphics.endFill();					}						// _label.alpha = 0;			_label.visible = false;			if(_checked)  			{  				_tick.graphics.lineStyle(6,0xFF0000,1);				_tick.graphics.moveTo(2,20);  				_tick.graphics.lineTo(15,38);  				_tick.graphics.lineTo(38,2);  											}		}  	}  }